!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=1)}([function(t,e){t.exports={isArray:function(t){return"[object Array]"===Object.prototype.toString.call(s)},arrayOr:function(t,e){return this.isArray(t)?t:e},isHTMLElement:function(t){return!!t&&!!t.nodeName},htmlElementOr:function(t,e){return this.isHTMLElement(t)?t:e},isValid:function(t){return!this.isUndefined(t)&&!this.isNull(t)},validOr:function(t,e){return this.isValid(t)?t:e},isError:function(t){return"[object Error]"===Object.prototype.toString.call(t)},errorOr(t,e){return this.isError(t)?t:e},isUndefined:function(t){return"[object Undefined]"===Object.prototype.toString.call(t)},undefinedOr:function(t,e){return this.isUndefined(t)?t:e},isNull:function(t){return"[object Null]"===Object.prototype.toString.call(t)},nullOr:function(t,e){return this.isNull(t)?t:e},isMath:function(t){return"[object Math]"===Object.prototype.toString.call(t)},mathOr:function(t,e){return this.isMath(t)?t:e},isObject:function(t){return"[object Object]"===Object.prototype.toString.call(t)},objectOr:function(t,e){return this.isObject(t)?t:e},isFunction:function(t){return"[object Function]"===Object.prototype.toString.call(t)},functionOr:function(t,e){return this.isFunction(t)?t:e},isRegExp:t=>"[object RegExp]"===Object.prototype.toString.call(t),regExpOr(t,e){return this.isRegExp(t)?t:e},isString:function(t){return"[object String]"===Object.prototype.toString.call(t)},stringOr:function(t,e){return this.isString(t)?t:e},isDate:function(t){return"[object Date]"===Object.prototype.toString.call(t)},dateOr:function(t,e){return this.isDate(t)?t:e},isNegativeNumber:function(t){return"[object Number]"===Object.prototype.toString.call(t)&&0>t},negativeNumberOr:function(t,e){return this.isNegativeNumber(t)?t:e},isPositiveNumber:function(t){return"[object Number]"===Object.prototype.toString.call(t)&&0<=t},postiveNumberOr:function(t,e){return this.isPositiveNumber(t)?t:e},isNumber:function(t){return"[object Number]"===Object.prototype.toString.call(t)},numberOr(t,e){return this.isNumber(t)?t:e},isBoolean:function(t){return"[object Boolean]"===Object.prototype.toString.call(t)},booleanOr:function(t,e){return this.isBoolean(t)?t:e},isObjectNotEmpty:function(t){return!!this.isObject(t)&&!!Object.keys(t).length},objectNotEmptyOr:function(t,e){return this.isObjectNotEmpty(t)?t:e},isArgs:function(t){return"[object Arguments]"===Object.prototype.toString.call(t)},argsOr:function(t,e){return this.isArgs(t)?t:e},isTextNode:function(t){return!!this.isHTMLElement(t)&&3===t.nodeType},textNodeOr:function(t,e){return this.isTextNode(t)?t:e}}},function(t,e,i){var n=i(2),s=i(3);window.xInterval=n,window.xTimeout=s},function(t,e,i){const n=i(0);function s(t,e){this.clock=0,this.breakloop=n.isNumber(e)?e:null,this.clockUnit=100,this.timeLine={remove:function(t){this.hasOwnProperty(t)&&(delete this[t],console.log("Removed action on time:"+t))}},this.interval=null,this.state="paused",this.n=1,this.timeEdit=0,this.defaultTimeline=!1,this.timeOver=n.isNumber(t)?t:null,this.setClock=function(t){this.clock=t},this.setClockUnit=function(t){return n.isNumber(t)?(this.clockUnit=t,this):(console.warn("Clock Unit must be number in milisecond: Used default clock unit"),this)},this.at=function(t,e){if(1==arguments.length&&n.isObject(arguments[0]))for(keys in arguments[0])if(this.timeLine.hasOwnProperty(keys)){var i=this.timeLine[keys];this.timeLine[keys]=function(t,e,n){i(t,e,n),arguments[0][keys](t,e,n)}}else this.timeLine[keys]=arguments[0][keys];else if(isFinite(t)&&n.isFunction(e))if(this.timeLine.hasOwnProperty(t)){i=this.timeLine[t];console.log("collison"),this.timeLine[t]=function(t,n,s){i(t,n,s),e(t,n,s)}}else this.timeLine[t]=e;else console.error("Illegal arguments supplied to xInterval.at method");return this},this.clockInterval=function(){if(!this.timeOver)return console.error("Please give  xInterval instance  a time where it stop and loop over"),!1;var t=this,e=setInterval(function(){if(t.clock>t.timeOver)if(n.isNumber(t.breakloop)){if(t.breakloop==t.n++)return clearInterval(t.interval),t.breakloop=!1,2;t.clock=0}else t.clock=0;n.isObjectNotEmpty(t.timeLine)?(t.clock+=t.clockUnit,t.timeLine.hasOwnProperty(t.clock)&&(n.isFunction(t.timeLine[t.clock])?t.timeLine[t.clock](e,t.setClock,t.clock):console.error("Not a valid function in timeline:"+t.clock))):t.clear()},this.clockUnit);return this.state="running",this.interval=e,this},this.remove=function(t){return this.timeLine.hasOwnProperty(t)&&(delete this.timeLine[t],console.log("Removed action on time:"+t)),this}}t.exports=s,s.prototype={toString:function(){return"[Object xInterval]"},start:function(){return"paused"===this.state&&(n.isFunction(this.event.beforestart)&&this.event.beforestart(),this.n=1,this.clock=0,this.clockInterval(),this.state="running",n.isFunction(this.event.onstart)&&this.event.onstart()),n.isFunction(this.event.afterstart)&&this.event.afterstartstart(),this},pause:function(){return n.isFunction(this.event.beforepause)&&this.event.beforepause(),"running"===this.state&&(clearInterval(this.interval),this.state="paused",n.isFunction(this.event.onpause)&&this.event.onpause()),n.isFunction(this.event.beforestop)&&this.event.beforestop(),this},resume:function(){return n.isFunction(this.event.beforeresume)&&!1===this.event.beforeresume(this)?this:("paused"===this.state&&(this.clockInterval(),this.state="running",n.isFunction(this.event.onresume)&&this.event.onresume()),n.isFunction(this.event.afterresume)&&this.event.afterresume(),this)},forward:function(t){return t=t||500,this.clock+t>this.timeOver?this.clock=this.timeOver:this.clock=this.clock+t,"paused"===this.state&&(this.clockInterval(),clearInterval(this.interval)),this},backward:function(t){return t=t||500,this.clock-t<0?this.clock=0:this.clock=this.clock-t,"paused"===this.state&&(this.clockInterval(),clearInterval(this.interval)),this},reverse:function(){var t={};for(keys in this.timeLine){var e=keys;parseInt(e)&&keys<this.timeOver&&(e=this.timeOver-keys,console.log(e)),t[e]=this.timeLine[keys]}return this.timeLine=t,this},slow:function(t){t=n.isNumber(t)?t:100;var e={};for(keys in this.timeOver+=Math.round(.5*this.timeOver),this.timeLine){var i=keys;parseInt(keys)&&keys<this.timeOver&&(i=parseInt(keys)+.5*parseInt(keys),i=100*parseInt(Math.round(i/100)),console.log(i)),e[i]=this.timeLine[keys]}this.timeLine=e},fast:function(t){if(-2>this.timeEdit)return!1;t=n.isNumber(t)?t/100:1;var e={};for(keys in this.timeLine){var i=keys;parseInt(keys)&&t<keys&&keys>200&&(i=parseInt(keys)-.5*parseInt(keys),i=100*parseInt(Math.round(i/100)),console.log(i)),e[i]=this.timeLine[keys]}this.timeLine=e,this.timeOver-=Math.round(.5*this.timeOver),this.timeEdit-=1},stop:function(){return n.isFunction(this.event.beforestop)&&this.event.beforestop(),"running"===this.state&&(clearInterval(this.interval),this.state="paused",this.clock=0,n.isFunction(this.event.onstop)&&this.event.onstop()),n.isFunction(this.event.afterstop)&&this.event.afterstop(),this},restart:function(){return this.state="paused",this.start()},clear:function(){return this.interval&&(clearInterval(this.interval),this.clock=0,this.state="paused",this.n=1),this},event:{beforeplay:null,afterplay:null,onplay:null,onpause:null,beforepause:null,afterpause:null,beforestart:null,afterstart:null,onstart:null,onstop:null,beforestop:null,afterstop:null,onresume:null,beforeresume:null,afterresume:null,onloop:null,beforeloop:null,afterloop:null}}},function(t,e,i){const n=i(0);function s(t){this.loop=!!n.isNumber(t)&&--t,this.loopCount=0,this.init=0,this.state="paused",this.xtimer=null,this.totaltime=0,this.timeLine=[],this.at=function(t,e){if(1==arguments.length&&n.isObject(arguments[0])){for(var i in arguments[0]){var s=i-this.totaltime;this.timeLine.push({time:s,callback:arguments[0][i]}),this.totaltime=i}console.warn("Dont pass {} agruments in after() or at() methods; might not get desired result")}else isFinite(t)&&n.isFunction(e)?this.timeLine.push({time:t,callback:e}):console.log("Illegal arguments supplied to xTimeout.at method");return this},this.after=function(t,e){return 1==arguments.length&&n.isObject(arguments[0])?this.at(t):this.at(t,e)},this.main=function(){var t=this,e=this.timeLine.length,i=this.timeLine;this.xtimer=setTimeout(function n(){return"paused"==t.state?(clearTimeout(t.xtimer),!1):(i[t.init].callback(),t.init++,t.init==e?(clearTimeout(t.xtimer),!1):void(t.xtimer=setTimeout(n,i[t.init].time)))},i[t.init].time)}}t.exports=s,s.prototype={toString:function(){return"[Object xTimeout]"},next:function(){return this.pause(),this.init<this.timeLine.length?this.init+=1:this.init=this.timeLine.length,this.resume()},first:function(){return this.init=0,this},last:function(){this.init=this.timeLine.length-1,this.this},previous:function(){return this.pause(),this.init>1?this.init-=2:this.init=0,this.resume()},start:function(){if(n.isFunction(this.event.beforestart)&&this.event.beforestart(),this.loop){var t=this;this.at(100,function(){t.loopCount<t.loop?(n.isFunction(t.event.beforeloop)&&t.event.beforeloop(),t.loopCount++,t.init=-1):(t.timeLine.pop(),n.isFunction(t.event.afterloop)&&t.event.afterloop())})}return this.state="running",this.init=0,n.isFunction(this.event.onstart)&&this.event.onstart(),this.main(),n.isFunction(this.event.afterstart)&&this.event.afterstart(),this},pause:function(){return n.isFunction(this.event.beforepause)&&this.event.beforepause(),"running"==this.state&&(this.clear(),this.state="paused",n.isFunction(this.event.onpause)&&this.event.onpause()),n.isFunction(this.event.afterpause)&&this.event.afterpause(),this},resume:function(){return n.isFunction(this.event.beforeresume)&&this.event.beforeresume(),"paused"==this.state&&this.timeLine.length>this.init&&(this.main(),this.state="running",n.isFunction(this.event.onresume)&&this.event.onresume()),n.isFunction(this.event.afterresume)&&this.event.afterresume(),this},clear:function(){this.xtimer&&clearTimeout(this.xtimer)},stop:function(){n.isFunction(this.event.beforestop)&&this.event.beforestop(),this.clear(),this.state="paused",this.init=0,n.isFunction(this.event.onstop)&&this.event.onstop(),n.isFunction(this.event.afterstop)&&this.event.afterstop()},event:{beforeplay:null,afterplay:null,onplay:null,onpause:null,beforepause:null,afterpause:null,beforestart:null,afterstart:null,onstart:null,onstop:null,beforestop:null,afterstop:null,onresume:null,beforeresume:null,afterresume:null,onloop:null,beforeloop:null,afterloop:null}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,